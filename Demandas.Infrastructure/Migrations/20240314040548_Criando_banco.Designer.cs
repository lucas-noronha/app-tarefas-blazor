// <auto-generated />
using System;
using Demandas.Infrastructure.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Demandas.Infrastructure.Migrations
{
    [DbContext(typeof(DemandasDb))]
    [Migration("20240314040548_Criando_banco")]
    partial class Criando_banco
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Demandas.Domain.Entities.AnexosDemanda", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("DemandaId")
                        .HasColumnType("integer");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("DemandaId");

                    b.ToTable("AnexosDemanda");
                });

            modelBuilder.Entity("Demandas.Domain.Entities.Cliente", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("cd_codigo");

                    NpgsqlPropertyBuilderExtensions.UseSerialColumn(b.Property<int>("Id"));

                    b.Property<string>("Contato")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("ds_contato");

                    b.Property<int>("EmpresaId")
                        .HasColumnType("integer")
                        .HasColumnName("cd_empresa");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("ds_nome");

                    b.HasKey("Id");

                    b.HasIndex("EmpresaId");

                    b.ToTable("clientes", (string)null);
                });

            modelBuilder.Entity("Demandas.Domain.Entities.Demanda", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("cd_codigo");

                    NpgsqlPropertyBuilderExtensions.UseSerialColumn(b.Property<int>("Id"));

                    b.Property<int>("ClienteId")
                        .HasColumnType("integer")
                        .HasColumnName("cd_cliene");

                    b.Property<DateTime>("DataCriacao")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("dt_criacao");

                    b.Property<DateTime?>("DataFinalizacao")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("dt_finalizacao");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("ds_descricao");

                    b.Property<int>("EmpresaId")
                        .HasColumnType("integer")
                        .HasColumnName("cd_empresa");

                    b.Property<bool?>("Importante")
                        .HasColumnType("boolean")
                        .HasColumnName("st_importante");

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("cd_status");

                    b.Property<int>("TipoDemanda")
                        .HasColumnType("integer")
                        .HasColumnName("cd_tipo");

                    b.Property<string>("Titulo")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("ds_titulo");

                    b.Property<bool?>("Urgente")
                        .HasColumnType("boolean")
                        .HasColumnName("st_urgente");

                    b.Property<int>("UsuarioCadastranteId")
                        .HasColumnType("integer")
                        .HasColumnName("cd_usuario_cadastro");

                    b.Property<int?>("UsuarioResponsavelId")
                        .HasColumnType("integer")
                        .HasColumnName("cd_responsavel");

                    b.HasKey("Id");

                    b.HasIndex("ClienteId");

                    b.HasIndex("EmpresaId");

                    b.HasIndex("UsuarioCadastranteId");

                    b.HasIndex("UsuarioResponsavelId");

                    b.ToTable("demanda", (string)null);
                });

            modelBuilder.Entity("Demandas.Domain.Entities.EmpresaCliente", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("ds_codigo");

                    NpgsqlPropertyBuilderExtensions.UseSerialColumn(b.Property<int>("Id"));

                    b.Property<string>("Logo")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("ds_logo");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("ds_nome");

                    b.HasKey("Id");

                    b.ToTable("empresa_cliente", (string)null);
                });

            modelBuilder.Entity("Demandas.Domain.Entities.Usuario", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("cd_codigo");

                    NpgsqlPropertyBuilderExtensions.UseSerialColumn(b.Property<int>("Id"));

                    b.Property<bool>("Administrador")
                        .HasColumnType("boolean")
                        .HasColumnName("st_adm");

                    b.Property<bool>("Desenvolvedor")
                        .HasColumnType("boolean")
                        .HasColumnName("st_dev");

                    b.Property<string>("Email")
                        .HasColumnType("text")
                        .HasColumnName("ds_email");

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("ds_login");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("ds_nome");

                    b.Property<string>("Senha")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("ds_senha");

                    b.HasKey("Id");

                    b.ToTable("usuario", (string)null);
                });

            modelBuilder.Entity("Demandas.Domain.Entities.AnexosDemanda", b =>
                {
                    b.HasOne("Demandas.Domain.Entities.Demanda", "Demanda")
                        .WithMany("Anexos")
                        .HasForeignKey("DemandaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Demanda");
                });

            modelBuilder.Entity("Demandas.Domain.Entities.Cliente", b =>
                {
                    b.HasOne("Demandas.Domain.Entities.EmpresaCliente", "Empresa")
                        .WithMany("Clientes")
                        .HasForeignKey("EmpresaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Empresa");
                });

            modelBuilder.Entity("Demandas.Domain.Entities.Demanda", b =>
                {
                    b.HasOne("Demandas.Domain.Entities.Cliente", "Cliente")
                        .WithMany()
                        .HasForeignKey("ClienteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Demandas.Domain.Entities.EmpresaCliente", "Empresa")
                        .WithMany()
                        .HasForeignKey("EmpresaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Demandas.Domain.Entities.Usuario", "UsuarioCadastrante")
                        .WithMany()
                        .HasForeignKey("UsuarioCadastranteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Demandas.Domain.Entities.Usuario", "UsuarioResponsavel")
                        .WithMany()
                        .HasForeignKey("UsuarioResponsavelId");

                    b.Navigation("Cliente");

                    b.Navigation("Empresa");

                    b.Navigation("UsuarioCadastrante");

                    b.Navigation("UsuarioResponsavel");
                });

            modelBuilder.Entity("Demandas.Domain.Entities.Demanda", b =>
                {
                    b.Navigation("Anexos");
                });

            modelBuilder.Entity("Demandas.Domain.Entities.EmpresaCliente", b =>
                {
                    b.Navigation("Clientes");
                });
#pragma warning restore 612, 618
        }
    }
}
